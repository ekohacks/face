"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onSuccess = exports.onPostBuild = exports.onBuild = exports.onDev = exports.onPreBuild = void 0;
const path_1 = __importDefault(require("path"));
const process_1 = __importDefault(require("process"));
require("abortcontroller-polyfill/dist/abortcontroller-polyfill-only");
const common_tags_1 = require("common-tags");
const fs_extra_1 = require("fs-extra");
const node_fetch_1 = __importDefault(require("node-fetch"));
const cache_1 = require("./helpers/cache");
const config_1 = require("./helpers/config");
const files_1 = require("./helpers/files");
const functions_1 = require("./helpers/functions");
const verification_1 = require("./helpers/verification");
const DEFAULT_FUNCTIONS_SRC = 'netlify/functions';
async function onPreBuild({ constants, utils, netlifyConfig, }) {
    const { PUBLISH_DIR } = constants;
    // Print a helpful message if the publish dir is misconfigured
    if (!PUBLISH_DIR || process_1.default.cwd() === path_1.default.resolve(PUBLISH_DIR)) {
        utils.build.failBuild(`Gatsby sites must publish the "public" directory, but your site’s publish directory is set to “${PUBLISH_DIR}”. Please set your publish directory to your Gatsby site’s "public" directory.`);
    }
    if ((0, config_1.shouldSkip)(PUBLISH_DIR)) {
        return;
    }
    await (0, cache_1.restoreCache)({ utils, publish: PUBLISH_DIR });
    await (0, config_1.checkConfig)({ utils, netlifyConfig });
    await (0, config_1.checkNetlifyImageCdn)({ netlifyConfig });
}
exports.onPreBuild = onPreBuild;
async function onDev({ netlifyConfig, constants, }) {
    // eslint-disable-next-line no-param-reassign
    netlifyConfig.build.environment.GATSBY_PRECOMPILE_DEVELOP_FUNCTIONS = `true`;
    const { PUBLISH_DIR } = constants;
    const cacheDir = (0, cache_1.normalizedCacheDir)(PUBLISH_DIR);
    const neededFunctionsForBuild = await (0, config_1.getNeededFunctions)(cacheDir);
    // DSG/SSR engine is not produced for dev so we are filtering them out
    const neededFunctions = neededFunctionsForBuild.filter((neededFunction) => neededFunction !== 'DSG' && neededFunction !== 'SSR');
    await (0, functions_1.writeFunctions)({ constants, netlifyConfig, neededFunctions });
    await (0, config_1.modifyConfig)({ netlifyConfig, cacheDir, neededFunctions, isDev: true });
}
exports.onDev = onDev;
async function onBuild({ constants, netlifyConfig, }) {
    const { PUBLISH_DIR, FUNCTIONS_SRC = DEFAULT_FUNCTIONS_SRC, INTERNAL_FUNCTIONS_SRC, } = constants;
    if ((0, config_1.shouldSkip)(PUBLISH_DIR)) {
        return;
    }
    const cacheDir = (0, cache_1.normalizedCacheDir)(PUBLISH_DIR);
    if (INTERNAL_FUNCTIONS_SRC &&
        (0, fs_extra_1.existsSync)(path_1.default.join(FUNCTIONS_SRC, 'gatsby'))) {
        console.log((0, common_tags_1.stripIndent) `
    Detected the function "${path_1.default.join(FUNCTIONS_SRC, 'gatsby')}" that seem to have been generated by an old version of the Essential Gatsby plugin. 
The plugin no longer uses this and it should be deleted to avoid conflicts.\n`);
    }
    const neededFunctions = await (0, config_1.getNeededFunctions)(cacheDir);
    await (0, functions_1.deleteFunctions)(constants);
    if ((0, config_1.shouldSkipBundlingDatastore)()) {
        console.log('Creating site data metadata file');
        await (0, config_1.createMetadataFileAndCopyDatastore)(PUBLISH_DIR, cacheDir);
    }
    await (0, functions_1.writeFunctions)({ constants, netlifyConfig, neededFunctions });
    await (0, config_1.modifyConfig)({ netlifyConfig, cacheDir, neededFunctions, isDev: false });
    await (0, files_1.modifyFiles)({ netlifyConfig, neededFunctions });
}
exports.onBuild = onBuild;
async function onPostBuild({ constants: { PUBLISH_DIR, FUNCTIONS_DIST }, utils, }) {
    if ((0, config_1.shouldSkip)(PUBLISH_DIR)) {
        return;
    }
    await (0, cache_1.saveCache)({ publish: PUBLISH_DIR, utils });
    const cacheDir = (0, cache_1.normalizedCacheDir)(PUBLISH_DIR);
    const neededFunctions = await (0, config_1.getNeededFunctions)(cacheDir);
    for (const func of neededFunctions) {
        await (0, verification_1.checkZipSize)(path_1.default.join(FUNCTIONS_DIST, `__${func.toLowerCase()}.zip`));
    }
}
exports.onPostBuild = onPostBuild;
async function onSuccess({ constants: { PUBLISH_DIR } }) {
    if ((0, config_1.shouldSkip)(PUBLISH_DIR)) {
        return;
    }
    // Pre-warm the lambdas as downloading the datastore file can take a while
    if ((0, config_1.shouldSkipBundlingDatastore)()) {
        const FETCH_TIMEOUT = 5000;
        const controller = new AbortController();
        const timeout = setTimeout(() => {
            controller.abort();
        }, FETCH_TIMEOUT);
        for (const func of ['api', 'dsg', 'ssr']) {
            const url = `${process_1.default.env.DEPLOY_PRIME_URL}/.netlify/functions/__${func}`;
            console.log(`Sending pre-warm request to: ${url}`);
            try {
                await (0, node_fetch_1.default)(url, { signal: controller.signal });
            }
            catch (error) {
                console.log('Pre-warm request was aborted', error);
            }
            finally {
                clearTimeout(timeout);
            }
        }
    }
}
exports.onSuccess = onSuccess;
